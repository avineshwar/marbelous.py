}0 }1 }2 }3 }4 }5 }6 }7
An ag ra mc he ck fo ur
Hp

# compares two four-byte sets
# returns 1 if they are anagrams of each other, 0 otherwise
:Anagramcheckfour
}0 }1 }2 }3 }4 }5 }6 }7 00 .. 01 # 8 inputs and the potential output values 00/01
So rt So rt So rt So rt &0 .. &1 # start bubble sorting the inputs, also hold output values in syncs
.. So rt .. .. So rt .. {0 @4 {0 # continue bubble sorting the inputs, output the result, begin adding up comparison results
So rt So rt So rt So rt @6 .. @5 # more bubble sorting, more comparison results
.. So rt .. .. So rt .. \\ .. //
So rt So rt So rt So rt @7 &2 .. # last round of bubble sort, more comparison results
.. @0 .. @1 @0 .. @1 .. &2 .. .. # swap sorted inputs from 12341234 to 11223344
.. .. .. .. .. .. .. .. \\ >3 &0 # check if all four comparisons were true, release an output sync
Eq al Eq al Eq al Eq al .. &1 .. # check if each sorted input is equal to its neighbor
@4 .. @5 .. @6 .. @7 .. .. \/ \/ # send equality results over to be added up

#include logical_operations.mbl
#include hex_out.mbl