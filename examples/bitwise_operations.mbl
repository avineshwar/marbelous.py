}0 }1
Bn or
Hp

# shift left with overflow out only
:Sl
}0 }0
<< ^7
{0 {<

# shift left with overflow in only
:Shli
}0 ..
<< }1
{0 //

# shift left with overflow in and out
:Shlo
.. }0 ..
{< Sl }1
.. {0 //

# shift right with overflow out only
:Sr
}0 }0 80
>> ^7 &0
{0 =1 {>
.. &0 ..
.. \/ ..

# shift right with overflow in only
:Shri
.. }1
}0 >>
\\ {1

# shift right with overflow in and out
:Shro
.. }1 }1 80
}0 >> ^7 &0
\\ {1 =1 {>
.. .. &0 ..
.. .. \/ ..

# extract the nth bit from a byte
:Bitx
# }0 is the byte, }1 is the bit index, 0 is LSB
}0 }0 }0 }0 }0 }0 }0 }0
&0 &1 &2 &3 &4 &5 &6 &7
^0 ^1 ^2 ^3 ^4 ^5 ^6 ^7
{0 {0 {0 {0 {0 {0 {0 {0
}1 }1 }1 }1 }1 }1 }1 }1
=0 =1 =2 =3 =4 =5 =6 =7
&0 &1 &2 &3 &4 &5 &6 &7

:Bdif
# returns the amount of bits that differ between two marbles
# 0 means equality
}0 }1 }0 }1 }0 }1 }0 }1 }0 }1 }0 }1 }0 }1 }0 }1
^0 ^0 ^1 ^1 ^2 ^2 ^3 ^3 ^4 ^4 ^5 ^5 ^6 ^6 ^7 ^7 # mask out individual bits of }0 and }1
Lx or Lx or Lx or Lx or Lx or Lx or Lx or Lx or # feed them into Logical-xor
\\ @0 // @0 \\ .. // .. \\ .. // @1 \\ @1 // .. # add the results together
.. .. .. \\ @2 // @2 .. @3 \\ @3 // .. .. .. ..
.. .. .. .. .. .. \\ {0 // .. .. .. .. .. .. ..

# bitwise or
:Borr
# return a|b
}0 .. }0 .. }0 .. }0 .. ..
.. }1 .. }1 .. }1 .. }1 ..
^7 ^7 ^6 ^6 ^5 ^5 ^4 ^4 ..
=1 =1 =1 =1 =1 =1 =1 =1 \/
&7 // &6 // &5 // &4 // ..
}0 .. }0 .. }0 .. }0 .. ..
.. }1 .. }1 .. }1 .. }1 ..
^3 ^3 ^2 ^2 ^1 ^1 ^0 ^0 ..
=1 =1 =1 =1 =1 =1 =1 =1 ..
&3 // &2 // &1 // &0 // ..
80 40 20 10 08 04 02 01 {0
&7 &6 &5 &4 &3 &2 &1 &0 ..
{0 {0 {0 {0 {0 {0 {0 {0 ..

# bitwise and
:Band
# return a&b
}0 }0 }0 }0 }0 }0 }0 }0 ..
^7 ^6 ^5 ^4 ^3 ^2 ^1 ^0 ..
=1 =1 =1 =1 =1 =1 =1 =1 \/
&7 &6 &5 &4 &3 &2 &1 &0 ..
}1 }1 }1 }1 }1 }1 }1 }1 ..
^7 ^6 ^5 ^4 ^3 ^2 ^1 ^0 ..
=1 =1 =1 =1 =1 =1 =1 =1 ..
&7 &6 &5 &4 &3 &2 &1 &0 ..
80 40 20 10 08 04 02 01 {0
&7 &6 &5 &4 &3 &2 &1 &0 ..
{0 {0 {0 {0 {0 {0 {0 {0 ..

# bitwise xor
:Bxor
# return a^b
}0 }1 }0 }1 }0 }1 }0 }1 ..
^7 ^7 ^6 ^6 ^5 ^5 ^4 ^4 ..
Lx or Lx or Lx or Lx or ..
=0 &7 =0 &6 =0 &5 =0 &4 ..
}0 }1 }0 }1 }0 }1 }0 }1 ..
^3 ^3 ^2 ^2 ^1 ^1 ^0 ^0 00
Lx or Lx or Lx or Lx or ..
=0 &3 =0 &2 =0 &1 =0 &0 ..
80 40 20 10 08 04 02 01 ..
&7 &6 &5 &4 &3 &2 &1 &0 ..
{0 {0 {0 {0 {0 {0 {0 {0 {0

# bitwise nor
:Bnor
# return ~(a|b)
}0 }1 }0 }1 }0 }1 }0 }1 ..
^7 ^7 ^6 ^6 ^5 ^5 ^4 ^4 ..
Ln or Ln or Ln or Ln or ..
=0 &7 =0 &6 =0 &5 =0 &4 ..
}0 }1 }0 }1 }0 }1 }0 }1 ..
^3 ^3 ^2 ^2 ^1 ^1 ^0 ^0 00
Ln or Ln or Ln or Ln or ..
=0 &3 =0 &2 =0 &1 =0 &0 ..
80 40 20 10 08 04 02 01 ..
&7 &6 &5 &4 &3 &2 &1 &0 ..
{0 {0 {0 {0 {0 {0 {0 {0 {0

#include logical_operations.mbl
#include hex_out.mbl