# prints the X Y coordinates of the nth vertex in the Dragon Curve Fractal
#
# original code by Christopher Night
# modified by Sparr
#
# Usage:
#  to print the first 32 vertices:
#   seq 32 | xargs -n1 python -O marbelous.py dragon_fractal_position.mbl
#  to produce a png with gnuplot:
#   seq 32 | xargs -n1 python -O marbelous.py dragon_fractal_position.mbl | gnuplot -e "set terminal png;set output 'dragon.png';unset key;unset tics;unset border;plot '-' w l notitle"
#
# main board
# uses Dr to produce the X and Y coordinates
# prints X, then space, then Y, then \n
.. .. 0A
I0 .. ..
Dr Dr 20
Dp .. ..
.. .. ..
.. Dp ..
# calls Dragon with (0,0,n), adds 127 to both outputs
:Dr
I0 I0 I0 I0 I0
R0 R0 .. R0 R0
.. .. .. -- --
Dr ag on >> >>
O0 O1 .. O0 O1
# Dragon recursively calls itself
:Dragon
I0 I1 I2 .. ..
.. .. -- I2 ..
Dr ag on >0 ..
O0 O1 .. O2 St
.. .. /\ .. //
.. /\ ++ \\ ..
Dg I0 Dg I1 ..
O0 // O1 // O2
# Handy function for converting directions (0-3 mod 4) into x/y offsets
:Dg
I0
>>
M2
<<
--
O0
# Direction of I0'th fold in the dragon curve (1 or -1)
:St
.. I0 ..
.. Np I0
.. << !!
.. ++ //
.. St ..
I0 !! ..
Pw ++ ..
>0 O0 ..
\/ .. ..
# Largest power of 2 <= I0
:Np
I0 ..
<3 O0
>> ..
Np ..
<< ..
O0 ..
# Is I0 a power of 2?
:Pw
I0 .. I0
>1 >> M2
O0 .. <1
.. Pw --
.. O0 O0
# I0 mod 2
:M2
I0 ..
>> I0
<< ..
!! ..
++ //
O0 ..
# prints a marble as three decimal digits
:Dp
I0 .. ..
De co ut
+O +O +O
+O +O +O
# returns three decimal digits representing one input marble
:Decout
I0 I0 I0
/A /A %A
/A %A ..
O0 O1 O2
# divide by ten
:/A
.. I0 .. I0 ..
.. >> I0 .. ..
.. >> >> \\ ..
.. .. // .. //
.. /\ >> \\ ..
.. .. >> .. //
.. .. >> \\ ..
.. .. >> .. ..
\\ >> // .. ..
.. >> .. .. ..
.. >> .. .. ..
.. /\ .. .. ..
.. .. /\ << ..
.. .. .. << ..
.. \\ << // ..
.. .. !! .. ..
.. .. ++ .. ..
.. .. \\ .. //
\\ .. .. <A \/
.. \\ .. R0 ..
.. .. .. ++ ..
.. .. \\ .. ..
.. .. .. O0 ..
# modulo ten
:%A
P0 ..
I0 ..
>9 -A
O0 P0
