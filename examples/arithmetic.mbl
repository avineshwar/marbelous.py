.. }0 }1 0A
.. Ad do ..
Dp Dp .. //

# subtract with no borrow
:Subt
# {0 = }0 - }1
# implemented as {0 = }0 + ~}1 +1
.. }1
}0 ~~
\\ ++
.. {0

# half adder
:Addo
# {0 is }0 + }1
# {< is ( }0 + }1 ) > 256
.. }1 .. .. }1 .. .. }1 @0 .. @2 ..
}0 .. }0 }0 .. }1 }0 .. .. @1 =0 ?0
\\ Le ss \\ Le ss \\ {0 @2 // {< ++
.. @0 .. .. @1 .. .. .. .. .. .. {<

#full adder
:Addful
# {0 is }0 + }1 + }2
# {< is ( }0 + }1 + }2 ) > 256
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..

# multiplier with no overflow
:Mult
# {0 = }0 * }1
# masks out bits of }1
# shifts copies of }0 left that many times
# sums shifted copies
.. }1 }1 }1 }1 }1 }1 }1 }1
00 ^7 ^6 ^5 ^4 ^3 ^2 ^1 ^0
.. =1 =1 =1 =1 =1 =1 =1 =1
.. &7 &6 &5 &4 &3 &2 &1 &0
.. }0 .. .. .. .. .. .. ..
.. &7 }0 .. .. .. .. .. ..
.. << &6 }0 .. .. .. .. ..
.. << << &5 }0 .. .. .. ..
.. << << << &4 }0 .. .. ..
.. << << << << &3 }0 .. ..
.. << << << << << &2 }0 ..
.. << << << << << << &1 }0
.. << << << << << << << &0
{0 // // // // // // // //

#include dec_out.mbl
#include logical_operations.mbl